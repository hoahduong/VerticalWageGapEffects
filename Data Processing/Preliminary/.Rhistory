if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
#Simulate 10000 paths and save default leg, accrual leg and premium leg in vector D,A,P
n=10000
D=rep(0,n)
A=rep(0, n)
P=rep(0,n)
R=0.4
r=0.05
lamda=0.01
#loop n paths
for(i in 1:n)
{ #generate default time t
t=rexp(1,lamda)
if (t>4)
{
D[i]=0
A[i]=0
P[i]=exp(-r*1)+exp(-r*2)+exp(-r*3)+exp(-r*4)
}
if (t<4)
{
m=as.integer(t)
if (m==0)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]=0
}
if (m==1)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1)
}
if (m==2)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2)
}
if (m==3)
{
D[i]=(1-R)*exp(-r*t)
A[i]=(t-m)*exp(-r*t)
P[i]= exp(-0.05*1) + exp(-0.05*2) + exp(-0.05*3)
}
}
}
S = mean(D)/(mean(A)+mean(P))
S
